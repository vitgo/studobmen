// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package by.conspect.model;

import by.conspect.db.SystemUserRepository;
import by.conspect.model.SystemUser;
import by.conspect.model.SystemUserDataOnDemand;
import by.conspect.service.SystemUserService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SystemUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SystemUserDataOnDemand: @Component;
    
    private Random SystemUserDataOnDemand.rnd = new SecureRandom();
    
    private List<SystemUser> SystemUserDataOnDemand.data;
    
    @Autowired
    SystemUserService SystemUserDataOnDemand.systemUserService;
    
    @Autowired
    SystemUserRepository SystemUserDataOnDemand.systemUserRepository;
    
    public SystemUser SystemUserDataOnDemand.getNewTransientSystemUser(int index) {
        SystemUser obj = new SystemUser();
        setEmail(obj, index);
        setUserRole(obj, index);
        return obj;
    }
    
    public void SystemUserDataOnDemand.setEmail(SystemUser obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 500) {
            email = email.substring(0, 500);
        }
        obj.setEmail(email);
    }
    
    public void SystemUserDataOnDemand.setUserRole(SystemUser obj, int index) {
        String userRole = "userRole_" + index;
        if (userRole.length() > 500) {
            userRole = userRole.substring(0, 500);
        }
        obj.setUserRole(userRole);
    }
    
    public SystemUser SystemUserDataOnDemand.getSpecificSystemUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SystemUser obj = data.get(index);
        Long id = obj.getId();
        return systemUserService.findSystemUser(id);
    }
    
    public SystemUser SystemUserDataOnDemand.getRandomSystemUser() {
        init();
        SystemUser obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return systemUserService.findSystemUser(id);
    }
    
    public boolean SystemUserDataOnDemand.modifySystemUser(SystemUser obj) {
        return false;
    }
    
    public void SystemUserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = systemUserService.findSystemUserEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SystemUser' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SystemUser>();
        for (int i = 0; i < 10; i++) {
            SystemUser obj = getNewTransientSystemUser(i);
            try {
                systemUserService.saveSystemUser(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            systemUserRepository.flush();
            data.add(obj);
        }
    }
    
}
